// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Post {
  id           String    @id @default(cuid())
  title        String
  shortText    String
  fullText     String
  authorName   String
  phone        String?
  whatsapp     String?
  image        String?
  deadline     DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  comments     Comment[]
  complexId    String
  complex      Complex   @relation(fields: [complexId], references: [id], onDelete: Cascade)
  categorySlug String
  category     Category  @relation(fields: [categorySlug], references: [slug], onDelete: Cascade)

  @@index([categorySlug])
  @@index([complexId])
}

model Category {
  id    String @id @default(cuid())
  slug  String @unique
  name  String
  posts Post[]
}

model Complex {
  id          String  @id @default(cuid())
  name        String
  slug        String  @unique
  address     String?
  metro       String?
  description String?
  timeToMetro Int?
  posts       Post[]

  @@index([name])
  @@index([address])
}

// features    Features[]
// infra       Infra[]
// contacts    ComplexContacts[]

model Comment {
  id        String   @id @default(cuid())
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  author    String
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([postId])
}
